package ${packageName}.controller;

import java.util.ArrayList;
import java.util.List;
import lombok.RequiredArgsConstructor;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.constraints.*;
import cn.dev33.satoken.annotation.SaCheckPermission;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;
import com.meta.common.excel.core.ExcelResult;
import com.meta.common.core.core.domain.R;
import com.meta.common.excel.utils.ExcelUtil;
import com.meta.common.log.annotation.Log;
import com.meta.common.log.enums.BusinessType;
import com.meta.common.web.annotation.RepeatSubmit;
import com.meta.common.web.core.BaseController;
import jakarta.annotation.Resource;
import ${packageName}.domain.vo.${ClassName}Vo;
import ${packageName}.domain.vo.${ClassName}ImportVo;
import ${packageName}.domain.bo.${ClassName}Bo;
import ${packageName}.listener.${ClassName}ImportListener;
import ${packageName}.service.I${ClassName}Service;
import org.springframework.web.multipart.MultipartFile;

#if($table.crud || $table.sub)
import com.meta.common.orm.core.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * ${datetime}
 */
@Validated
@RequiredArgsConstructor
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController
{
    @Resource
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @SaCheckPermission("${permissionPrefix}:list")
    @GetMapping("/list")
#if($table.crud || $table.sub)
    public TableDataInfo<${ClassName}Vo> list(${ClassName}Bo ${className}Bo)
    {
        return ${className}Service.selectPage(${className}Bo);
    }
#elseif($table.tree)
    public R<List<${ClassName}Vo>> list(${ClassName}Bo ${className}Bo)
    {
        List<${ClassName}Vo> list = ${className}Service.selectList(${className}Bo);
        return R.ok(list);
    }
#end

    /**
     * 导出${functionName}列表
     */
    @SaCheckPermission("${permissionPrefix}:export")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    public void export(HttpServletResponse response, ${ClassName}Bo ${className}Bo)
    {
        List<${ClassName}Vo> list = ${className}Service.selectList(${className}Bo);
        ExcelUtil.exportExcel(list, "${functionName}", ${ClassName}Vo.class, response);
    }

    /**
     * 导入数据
     *
     * @param file          导入文件
     * @param updateSupport 是否更新已存在数据
     */
    @Log(title = "${functionName}", businessType = BusinessType.IMPORT)
    @SaCheckPermission("${permissionPrefix}:import")
    @PostMapping("/importData")
    public R<Void> importData(MultipartFile file, boolean updateSupport) throws Exception {
        ExcelResult<${ClassName}ImportVo> handlerResult = ExcelUtil.importExcel(file.getInputStream(), ${ClassName}ImportVo.class, new ${ClassName}ImportListener(updateSupport));
        return R.ok(handlerResult.getAnalysis());
    }

    @SaCheckPermission("${permissionPrefix}:import")
    @PostMapping("/importTemplate")
    public void importTemplate(HttpServletResponse response) {
        ExcelUtil.exportExcel(new ArrayList<>(), "${functionName}", ${ClassName}ImportVo.class, response);
    }

    /**
     * 获取${functionName}详细信息
     */
    @SaCheckPermission("${permissionPrefix}:query")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public R<${ClassName}Vo> getInfo(@PathVariable ${pkColumn.javaType} ${pkColumn.javaField})
    {
        return R.ok(${className}Service.selectById(${pkColumn.javaField}));
    }

    /**
     * 新增${functionName}
     */
    @SaCheckPermission("${permissionPrefix}:add")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @RepeatSubmit()
    @PostMapping
    public R<Void> add(@Validated @RequestBody ${ClassName}Bo ${className}Bo)
    {
        boolean inserted = ${className}Service.insert(${className}Bo);
        if (!inserted) {
            return R.fail("新增${functionName}记录失败！");
        }
        return R.ok();
    }

    /**
     * 修改${functionName}
     */
    @SaCheckPermission("${permissionPrefix}:edit")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @RepeatSubmit()
    @PutMapping
    public R<Void> edit(@Validated @RequestBody ${ClassName}Bo ${className}Bo)
    {
        Boolean updated = ${className}Service.update(${className}Bo);
        if (!updated) {
            return R.fail("修改${functionName}记录失败!");
        }
        return R.ok();
    }

    /**
     * 删除${functionName}
     */
    @SaCheckPermission("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public R<Void> remove(@PathVariable ${pkColumn.javaType}[] ${pkColumn.javaField}s)
    {
        boolean deleted = ${className}Service.deleteByIds(${pkColumn.javaField}s);
        if (!deleted) {
            return R.fail("删除${functionName}记录失败!");
        }
        return R.ok();
    }
}
