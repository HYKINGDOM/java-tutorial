<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.java.tutorial.project.mapper.GenTableColumnMapper">

    <resultMap type="com.java.tutorial.project.domain.GenTableColumn" id="GenTableColumnResult">
        <id     property="columnId"       column="column_id"      />
        <handlerResult property="tableId"        column="table_id"       />
        <handlerResult property="columnName"     column="column_name"    />
        <handlerResult property="columnComment"  column="column_comment" />
        <handlerResult property="columnType"     column="column_type"    />
        <handlerResult property="javaType"       column="java_type"      />
        <handlerResult property="javaField"      column="java_field"     />
        <handlerResult property="isPk"           column="is_pk"          />
        <handlerResult property="isIncrement"    column="is_increment"   />
        <handlerResult property="isRequired"     column="is_required"    />
        <handlerResult property="isInsert"       column="is_insert"      />
        <handlerResult property="isEdit"         column="is_edit"        />
        <handlerResult property="isList"         column="is_list"        />
        <handlerResult property="isQuery"        column="is_query"       />
        <handlerResult property="queryType"      column="query_type"     />
        <handlerResult property="htmlType"       column="html_type"      />
        <handlerResult property="dictType"       column="dict_type"      />
        <handlerResult property="sort"           column="sort"           />
        <handlerResult property="createBy"       column="create_by"      />
        <handlerResult property="createTime"     column="create_time"    />
        <handlerResult property="updateBy"       column="update_by"      />
        <handlerResult property="updateTime"     column="update_time"    />
    </resultMap>

	<sql id="selectGenTableColumnVo">
        select column_id, table_id, column_name, column_comment, column_type, java_type, java_field, is_pk, is_increment, is_required, is_insert, is_edit, is_list, is_query, query_type, html_type, dict_type, sort, create_by, create_time, update_by, update_time from gen_table_column
    </sql>

    <select id="selectDbTableColumnsByName" parameterType="String" resultMap="GenTableColumnResult">
        <if test="@com.meta.common.orm.helper.DataBaseHelper@isMySql()">
            select column_name,
            (case when (is_nullable = 'no' <![CDATA[ && ]]> column_key != 'PRI') then '1' else '0' end) as is_required,
            (case when column_key = 'PRI' then '1' else '0' end) as is_pk,
            ordinal_position as sort,
            column_comment,
            (case when extra = 'auto_increment' then '1' else '0' end) as is_increment,
            column_type
            from information_schema.columns where table_schema = (select database()) and table_name = (#{tableName})
            order by ordinal_position
        </if>
        <if test="@com.meta.common.orm.helper.DataBaseHelper@isPostgreSql()">
            SELECT column_name, is_required, is_pk, sort, column_comment, is_increment, column_type
            FROM (
            SELECT c.relname AS table_name,
            a.attname AS column_name,
            d.description AS column_comment,
            CASE WHEN a.attnotnull AND con.conname IS NULL THEN 1 ELSE 0
            END AS is_required,
            CASE WHEN con.conname IS NOT NULL THEN 1 ELSE 0
            END AS is_pk,
            a.attnum AS sort,
            CASE WHEN "position"(pg_get_expr(ad.adbin, ad.adrelid),
            ((c.relname::text || '_'::text) || a.attname::text) || '_seq'::text) > 0 THEN 1 ELSE 0
            END AS is_increment,
            btrim(
            CASE WHEN t.typelem <![CDATA[ <> ]]> 0::oid AND t.typlen = '-1'::integer THEN 'ARRAY'::text ELSE
            CASE WHEN t.typtype = 'd'::"char" THEN format_type(t.typbasetype, NULL::integer)
            ELSE format_type(a.atttypid, NULL::integer) END
            END, '"'::text
            ) AS column_type
            FROM pg_attribute a
            JOIN (pg_class c JOIN pg_namespace n ON c.relnamespace = n.oid) ON a.attrelid = c.oid
            LEFT JOIN pg_description d ON d.objoid = c.oid AND a.attnum = d.objsubid
            LEFT JOIN pg_constraint con ON con.conrelid = c.oid AND (a.attnum = ANY (con.conkey))
            LEFT JOIN pg_attrdef ad ON a.attrelid = ad.adrelid AND a.attnum = ad.adnum
            LEFT JOIN pg_type t ON a.atttypid = t.oid
            WHERE (c.relkind = ANY (ARRAY ['r'::"char", 'p'::"char"]))
            AND a.attnum > 0
            AND n.nspname = 'public'::name
            ORDER BY c.relname, a.attnum
            ) temp
            WHERE table_name = (#{tableName})
            AND column_type <![CDATA[ <> ]]> '-'
        </if>

	</select>

    <delete id="deleteGenTableColumnByIds" parameterType="Long">
        delete from gen_table_column where table_id in
        <foreach collection="array" item="tableId" open="(" separator="," close=")">
            #{tableId}
        </foreach>
    </delete>

</mapper>
